#!/usr/bin/env python
#
# Copyright (c) 2019 Fraunhofer Institute for Manufacturing Engineering and Automation (IPA)
# All rights reserved.
# Unauthorized copying of this file, via any medium is strictly prohibited.
# Proprietary and confidential.

import json
import sys
from uuid import uuid4
# Note that this needs:
# sudo pip install websocket-client
# not the library called 'websocket'
import websocket
import yaml
from rospy_message_converter import message_converter

from geometry_msgs.msg import PoseStamped, Pose2D, PoseWithCovarianceStamped
from std_msgs.msg import Bool, String
from move_base_msgs.msg import *
from nav_control.srv import MoveTo, MoveToResponse, GetPose, GetPoseResponse, GetPoseRequest, InitPose, InitPoseResponse
import tf
import rospy

class WebsocketROSClient(object):
    def __init__(self, websocket_ip, port=9090):
        """
        Class to manage publishing to ROS thru a rosbridge websocket.
        :param str websocket_ip: IP of the machine with the rosbridge server.
        :param int port: Port of the websocket server, defaults to 9090.
        """
        print("Connecting to websocket: {}:{}".format(websocket_ip, port))
	try:
            self.ws = websocket.create_connection(
                'ws://' + websocket_ip + ':' + str(port))
        except Exception:
            rospy.logerr("Could not open websocket {}:{}".format(websocket_ip, port))
            rospy.signal_shutdown("Could not open websocket {}:{}".format(websocket_ip, port))
        self._advertise_dict = {}

    def _advertise(self, topic_name, topic_type):
        """
        Advertise a topic with it's type in 'package/Message' format.
        :param str topic_name: ROS topic name.
        :param str topic_type: ROS topic type, e.g. std_msgs/String.
        :returns str: ID to de-advertise later on.
        """
        new_uuid = str(uuid4())
        self._advertise_dict[new_uuid] = {'topic_name': topic_name,
                                          'topic_type': topic_type}
        advertise_msg = {"op": "advertise",
                         "id": new_uuid,
                         "topic": topic_name,
                         "type": topic_type
                         }
        self.ws.send(json.dumps(advertise_msg))
        return new_uuid

    def _unadvertise(self, uuid):
        unad_msg = {"op": "unadvertise",
                    "id": uuid,
                    # "topic": topic_name
                    }
        self.ws.send(json.dumps(unad_msg))

    def __del__(self):
        """Cleanup all advertisings"""
        d = self._advertise_dict
        for k in d:
            self._unadvertise(k)

    def _publish(self, topic_name, message):
        """
        Publish onto the already advertised topic the msg in the shape of
        a Python dict.
        :param str topic_name: ROS topic name.
        :param dict msg: Dictionary containing the definition of the message.
        """
        msg = {
            'op': 'publish',
            'topic': topic_name,
            'msg': message
        }
        json_msg = json.dumps(msg)
        self.ws.send(json_msg)

    def publish(self, topic_name, ros_message):
        """
        Publish on a topic given ROS message thru rosbridge.
        :param str topic_name: ROS topic name.
        :param * ros_message: Any ROS message instance, e.g. LaserScan()
            from sensor_msgs/LaserScan.
        """
        # First check if we already advertised the topic
        d = self._advertise_dict
        for k in d:
            if d[k]['topic_name'] == topic_name:
                # Already advertised, do nothing
                break
        else:
            # Not advertised, so we advertise
            topic_type = ros_message._type
            self._advertise(topic_name, topic_type)
        # Converting ROS message to a dictionary thru YAML
        ros_message_as_dict = yaml.load(ros_message.__str__())
        # Publishing
        self._publish(topic_name, ros_message_as_dict)

    def subscribe(self,topic_name, ros_message):
        # First check if we already advertised the topic
        d = self._advertise_dict
        for k in d:
            if d[k]['topic_name'] == topic_name:
                # Already advertised, do nothing
                break
        else:
            # Not advertised, so we advertise
            topic_type = ros_message._type
            self._advertise(topic_name, topic_type)
        # Converting ROS message to a dictionary thru YAML
        ros_message_as_dict = yaml.load(ros_message.__str__())
        # Publishing
        return self._subscribe(topic_name, ros_message_as_dict, ros_message._type)

    def _subscribe(self, topic_name, message, type):
        """
        Publish onto the already advertised topic the msg in the shape of
        a Python dict.
        :param str topic_name: ROS topic name.
        :param dict msg: Dictionary containing the definition of the message.
        """
        msg = {
            'op': 'subscribe',
            'topic': topic_name,
            'type' : type
        }
        json_msg = json.dumps(msg)
        self.ws.send(json_msg)
        json_message = self.ws.recv()

        dictionary = json.loads(json_message)['msg']
        result =  message_converter.convert_dictionary_to_ros_message(type, dictionary)
        # print("Type: '%s' \n Received: '%s'" % (type, result))
        return result
"""
  NavControl class
    Grants access via rosbridge_server to a mobile robot

    Use the move_to-service to move the robot to a defined position
      Request: geometry_msgs/Pose2D -> Position the robot should move to in the robot's "map"-coordinate-frame
      Response: std_msgs/Int32 -> 0 indicates successfull operation, 1 indicates failure

    Use the get_pose-service to return a position in the robot's "map"-coordinate frame
      Request: Empty
      Response: geometry_msgs/Pose2D -> the robots localization in the robot's "map"-coordinate-frame

    Use the init_pose-service to set an initial position in the robot's "map"-coordinate frame
      Request: geometry_msgs/Pose2D -> the initital position in the robot's "map"-coordinate-frame
      Response: geometry_msgs/Pose2D -> the robots localization in the robot's "map"-coordinate-frame
"""
class NavControl:

    def __init__(self, ns):
      self.nav_running = False
      self.return_value = 0
      server_ip = rospy.get_param("~robot_ip", "127.0.0.1")
      self.ws_client = WebsocketROSClient(server_ip)
      self.move_to_service = rospy.Service(ns + "/nav_control/move_to", MoveTo, self.moveToCallback)
      self.get_pose_service = rospy.Service(ns + "/nav_control/get_pose", GetPose, self.getPoseCallback)
      self.init_pose_service = rospy.Service(ns + "/nav_control/init_pose", InitPose, self.initPoseCallback)
      rospy.logdebug("finished initialization")

    def moveToCallback(self, req):
      #convert geometry_msgs/Pose2D to geometry_msgs/PoseStamped
      msg = PoseStamped()
      msg.header.frame_id = "map"
      msg.header.stamp = rospy.get_rostime()
      msg.pose.position.x = req.goal.x
      msg.pose.position.y = req.goal.y
      msg.pose.orientation.x, msg.pose.orientation.y, msg.pose.orientation.z, msg.pose.orientation.w = \
        tf.transformations.quaternion_from_euler(0.0, 0.0, req.goal.theta)

      self.nav_running = True #indicate the move_base-state
      #Send to robot
      self.ws_client.publish("/move_base_simple/goal", msg)
      #Blocking subscription
      result = self.ws_client.subscribe('/move_base/result', MoveBaseActionResult())
      self.handleMbResult(result)
      return MoveToResponse(self.return_value)

    def getPoseCallback(self, req):
      #subscribe to robot's pose topic
      print "wait for pose"
      result = self.ws_client.subscribe('/pose', PoseStamped())
      print "got"
      #convert to geometry_msgs/Pose2D
      msg = Pose2D()
      msg.x = result.pose.position.x
      msg.y = result.pose.position.y
      msg.theta = tf.transformations.euler_from_quaternion([result.pose.orientation.x,  \
        result.pose.orientation.y, \
        result.pose.orientation.z, \
        result.pose.orientation.w])[2]
      return GetPoseResponse(msg)

    def initPoseCallback(self, req):
      #convert geometry_msgs/Pose2D to geometry_msgs/PoseStamped
      msg = PoseWithCovarianceStamped()
      msg.header.frame_id = "map"
      msg.header.stamp = rospy.get_rostime()
      msg.pose.pose.position.x = req.init_pose.x
      msg.pose.pose.position.y = req.init_pose.y
      msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w = \
        tf.transformations.quaternion_from_euler(0.0, 0.0, req.init_pose.theta)
      msg.pose.covariance[0] = 0.1 #var(x)
      msg.pose.covariance[7] = 0.1 #var(y)
      msg.pose.covariance[35] = 0.068 #var(theta)
      #Send to robot
      self.ws_client.publish("/initialpose", msg)
      #virtually call get_pose-service and use return to indicate a successfull operation
      return InitPoseResponse(self.getPoseCallback(GetPoseRequest()).pose)


      return GetPoseResponse(msg)

    def handleMbResult(self, data):
      if (data.status.status == 3):
        self.return_value = 0
      else:
        self.return_value = 1
      self.nav_running = False

def main():
    rospy.init_node("nav_control")
    controller = NavControl("")
    while not rospy.is_shutdown():
        rospy.spin()

if __name__ == '__main__':
    main()

